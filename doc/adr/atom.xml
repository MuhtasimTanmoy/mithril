<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mithril.network/doc/adr/</id>
    <title>Mithril. A complete guide. Blog</title>
    <updated>2022-12-01T09:23:11.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mithril.network/doc/adr/"/>
    <subtitle>Mithril. A complete guide. Blog</subtitle>
    <icon>https://mithril.network/doc/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[1. Record Architecture Decisions
]]></title>
        <id>1</id>
        <link href="https://mithril.network/doc/adr/1"/>
        <updated>2022-12-01T09:23:11.000Z</updated>
        <summary type="html"><![CDATA[Status]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>We are in search for a means to describe our technical architecture.</p><p>We are a small team working in a very lean and agile way (XP), so we naturally
prefer also light-weight documentation methods which also accomodate change
easily.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><ul><li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in
this
<a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" target="_blank" rel="noopener noreferrer">article</a>.</li><li>We will follow the convention of storing those ADRs as Markdown formatted
documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's
<a href="https://github.com/npryce/adr-tools" target="_blank" rel="noopener noreferrer">adr-tools</a>. This does not imply we will
be using <code>adr-tools</code> itself.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><p>See Michael Nygard's article, linked above.</p>]]></content>
        <category label="Accepted" term="Accepted"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2. Use simple structured logging
]]></title>
        <id>2</id>
        <link href="https://mithril.network/doc/adr/2"/>
        <updated>2022-12-01T09:23:11.000Z</updated>
        <summary type="html"><![CDATA[Status]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p><strong>Draft</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>Logs are a critical tool for operating any software system, enabling <a href="https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability" target="_blank" rel="noopener noreferrer">observability</a> of the system.</li><li>Following <a href="https://12factor.net/logs" target="_blank" rel="noopener noreferrer">12 Factor Apps</a> principles, providing the needed components and tools to be able to configure logging and monitoring should not be the responsibility of the software components</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p><em>Therefore</em></p><ul><li>Each component of the system use <a href="https://www.sumologic.com/glossary/structured-logging/" target="_blank" rel="noopener noreferrer">Structured logging</a> using documented and standardised JSON format for its logs</li><li>Logs are always emitted to <code>stdout</code> of the process the component is part of</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a class="hash-link" href="#consequences" title="Direct link to heading">​</a></h2><ul><li>The schema of the logged items should be properly documented in a JSON schema</li><li>It is the responsibility of the node operator to consume the logs and process them</li><li>We use existing libraries to provide needed log infrastructure, like <a href="https://zsiciarz.github.io/24daysofrust/book/vol2/day4.html" target="_blank" rel="noopener noreferrer">slog</a> for Rust</li></ul>]]></content>
        <category label="Draft" term="Draft"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[3. Release process and versioning
]]></title>
        <id>3</id>
        <link href="https://mithril.network/doc/adr/3"/>
        <updated>2022-12-01T09:23:11.000Z</updated>
        <summary type="html"><![CDATA[Status]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a class="hash-link" href="#status" title="Direct link to heading">​</a></h2><p><strong>draft</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><p>In order to deliver regularly the software to our users, we should implement a release process based on a predictable versioning scheme. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="versioning">Versioning<a class="hash-link" href="#versioning" title="Direct link to heading">​</a></h3><p>A Release Version determines a distribution of determined node versions and underlying libraries.</p><ul><li>Our softwares must be able to interact seamlessly with other Mithril software.</li><li>Our softwares must be able to be hosted on crates.io.</li><li>Our softwares must clearly indicate compatibility with other Mithril components to end users.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process">Release process<a class="hash-link" href="#release-process" title="Direct link to heading">​</a></h3><p>A Release is a software package that is built once and then promoted from the testing environment to the production environment. It can be signed.</p><ul><li>Keep it simple.</li><li>Automated as much as possible: all points not requiring human decision shall be automated.</li><li>Minimize the mean time to release.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a class="hash-link" href="#decision" title="Direct link to heading">​</a></h2><p>There are 3 versioned layers in the Mithril stack:</p><ul><li>HTTP API protocol to ensure compatibility in the communication between nodes (use Semver).</li><li>Crate version: each node &amp; library has its own version (use Semver). The commit digest is automatically added to the version by the CI pipeline.</li><li>Release Version: the distribution version (use version scheme <strong>YYWW.patch</strong> | <strong>YYWW.patch-name</strong>). The VERSION file is computed by the pipeline from the tag release.</li></ul><p>The documentation is tied to a Release Version.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process-1">Release Process<a class="hash-link" href="#release-process-1" title="Direct link to heading">​</a></h3><p>Starting just after a new release has been made:</p><ol><li>Develop on a dedicated development branch.</li><li>When merging PR on main: update the <code>Cargo.toml</code> files with version of the updated nodes.</li><li>Once merged, the CI creates an <code>unstable</code> tag &amp; release which is deployed on testing environment.</li><li>Push a tag using the distribution version format on this commit with a <code>-prerelease</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li><li>Push a tag using the distribution version format on this commit without the <code>-prerelease</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>pre-release</code> for testing.</li><li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li><li>Create a commit:<ol><li>to promote the documentation website from future to current.</li><li>to update the SQL schema with alterations from the previous release.</li></ol></li></ol><p><a target="_blank" href="/doc/assets/files/release_process-a9ce55af510cd542b71e68a485251004.jpg"><img loading="lazy" alt="Release Process" src="/doc/assets/images/release_process-a9ce55af510cd542b71e68a485251004.jpg" width="1220" height="819" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hotfix-release">Hotfix Release<a class="hash-link" href="#hotfix-release" title="Direct link to heading">​</a></h3><p>​
In case of a blocking issue (following a distribution release) on the release environment that requires an immediate fix:
​</p><ol><li>Create a branch on the last release tag with the following scheme: <strong>hotfix/{last_distribution-version}.{last_patch_number + 1}</strong>.</li><li>Development of the fix is done on this branch.</li><li>After each commit on this branch, the CI creates an <code>unstable</code> tag &amp; release which is not deployed on testing environment (testing must be done on an ad hoc environment manually created).</li><li>Push a tag on the branch last commit using the branch distribution version with a <code>-hotfix</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li><li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li><li>Merge the hotfix branch on main branch (and adapt the changes if they are not compatible with the current main branch).</li></ol>]]></content>
        <author>
            <name>Mithril Team</name>
        </author>
        <category label="Draft" term="Draft"/>
    </entry>
</feed>