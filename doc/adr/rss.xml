<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mithril. A complete guide. Blog</title>
        <link>https://mithril.network/doc/adr/</link>
        <description>Mithril. A complete guide. Blog</description>
        <lastBuildDate>Wed, 21 Jun 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[5. Use rfc3339 for date formatting 
]]></title>
            <link>https://mithril.network/doc/adr/5</link>
            <guid>https://mithril.network/doc/adr/5</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2><p>Previously, on the Mithril project we did not have a preferred format for the dates in our applications, leading to
multiple formats being used.</p><p>For example when querying a certificate from an aggregator, the <code>initiated_at</code> field did not specify the timezone,
timezone that could be found in the <code>sealed_at</code> field:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"initiated_at"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-05-26T00:02:23"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"sealed_at"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-05-26T00:03:23.998753492Z"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Same problem in our databases where a date could be stored without timezone and milliseconds (ie: <code>2023-06-13 16:35:28</code>)
in one table column and with them in another (ie: <code>2023-06-13T16:35:28.143292875Z</code>).</p><p>The <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank" rel="noopener noreferrer">RFC 3339</a> is a widely used, easily readable, mostly numeric (no
translation is needed to parse the day or the month), format. Also, it always includes the timezone meaning that our
client can convert such date to their local time if needed.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2><p><em>Therefore</em></p><ul><li>We commit to use <strong>RFC 3339</strong> compatible date and time whenever we need to store or show a date and time.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2><ul><li>All dates and time must use a dedicated type in the application, ie: the <code>DateTime&lt;Utc&gt;</code> type from
<a href="https://crates.io/crates/chrono" target="_blank" rel="noopener noreferrer">chrono</a> crate.<ul><li>This means that dates must <strong>never</strong> be stored in our types using Strings.</li></ul></li><li>Internally, we will always use the <strong>UTC timezone</strong>, to avoid useless conversions between timezones.</li><li>Users or scripts querying dates from our applications or from our databases will be able to parse all of them using
the same format.</li></ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[4. Mithril Network Upgrade Strategy
]]></title>
            <link>https://mithril.network/doc/adr/4</link>
            <guid>https://mithril.network/doc/adr/4</guid>
            <pubDate>Thu, 05 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2><p><strong>Draft</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2><p>When we will run Mithril on mainnet there will be thousands of signers running. Upgrading the version of the nodes has an impact as different versions of API, messages, signature may lead to loss of a significant part of the signers population over one epoch or more. In any case we must prevent a gap in the certificate chain while upgrading critical parts.</p><p>We need to be able to keep enough of signer nodes and the aggregator able to work together in order to produce at least one certificate per epoch.</p><p>Examples of such changes:</p><ul><li>change in the message structure</li><li>change in the cryptographic algorithm</li><li>change in communication channels</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2><p>In order to synchronize all nodes behavior transition, the Release Team will define Eras that start at a given Cardano Epoch and lasts until the next Era begins. When nodes detect an Era change, they switch from old to new behavior hence all transitioning at almost the same time.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-team">Release Team<a href="#release-team" class="hash-link" aria-label="Direct link to Release Team" title="Direct link to Release Team">​</a></h3><p>The release team is the team responsible of releasing new versions of Mithril software. The <strong>Release Team</strong> will be responsible to set the Epoch at which <strong>Eras</strong> change using an <strong>Era Activation Marker</strong>. In order to be able to determine when the new Era will begin, the Release Team has to know what is the share of the total Mithril stake that can run the new behavior. Signer node software versions has to be <strong>monitored</strong>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="version-monitoring">Version monitoring<a href="#version-monitoring" class="hash-link" aria-label="Direct link to Version monitoring" title="Direct link to Version monitoring">​</a></h3><p>The Release Team must be aware of the software version run by the Signer nodes and their associated stake. The version is going to be added to all HTTP headers in inter-node communication. In a first step, the Aggregator nodes will record this information, and provide the mapping of stakes to Signer nodes.</p><p>This configuration works in the case where there is a centralized Aggregator Node (as it is today). In the future, there may be several Aggregator nodes working in a decentralized manner. This would mean having a separate monitoring service, and also monitor the aggregators node versions.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="era-activation-marker">Era Activation Marker<a href="#era-activation-marker" class="hash-link" aria-label="Direct link to Era Activation Marker" title="Direct link to Era Activation Marker">​</a></h3><p>An Era Activation Marker is an information shared among all the nodes. For every upgrade, there are two phases:</p><ul><li>a first marker is set on the blockchain that just indicates a new Era will start soon and softwares shall be updated.</li><li>a second marker is set that specifies the Epoch when they must switch from old to new behavior.</li></ul><p>Every Era Activation Marker will be a transaction in the Cardano blockchain. This implies the nodes must be able to read transactions of the blockchain. Era Activation Markers can be of the same type, the first maker does not hold any Epoch information whereas the second does.</p><p>Node will check the blockchain for Markers at startup and for every new Epoch. When a node detects a Marker, it will warn the user if it does not support the incoming Era that he must upgrade his node. If the node detects it does not support the current Era, it will stop working with an explicit error message. To ease that operation, Era Activation Marker will be made sortable.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="behavior-switch">Behavior Switch<a href="#behavior-switch" class="hash-link" aria-label="Direct link to Behavior Switch" title="Direct link to Behavior Switch">​</a></h3><p>The nodes must be able to switch from one behavior to another when the Era Epoch is reached. This means the software must embed both behaviors. The switch is developed as a one time operation, there is no rollback mechanism available. Once the Epoch is transitioned and the switch has occurred, a new software release can remove the old behavior from the codebase.</p>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[3. Release process and versioning
]]></title>
            <link>https://mithril.network/doc/adr/3</link>
            <guid>https://mithril.network/doc/adr/3</guid>
            <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2><p><strong>draft</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2><p>In order to deliver regularly the software to our users, we should implement a release process based on a predictable versioning scheme. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="versioning">Versioning<a href="#versioning" class="hash-link" aria-label="Direct link to Versioning" title="Direct link to Versioning">​</a></h3><p>A Release Version determines a distribution of determined node versions and underlying libraries.</p><ul><li>Our softwares must be able to interact seamlessly with other Mithril software.</li><li>Our softwares must be able to be hosted on crates.io.</li><li>Our softwares must clearly indicate compatibility with other Mithril components to end users.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process">Release process<a href="#release-process" class="hash-link" aria-label="Direct link to Release process" title="Direct link to Release process">​</a></h3><p>A Release is a software package that is built once and then promoted from the testing environment to the production environment. It can be signed.</p><ul><li>Keep it simple.</li><li>Automated as much as possible: all points not requiring human decision shall be automated.</li><li>Minimize the mean time to release.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2><p>There are 3 versioned layers in the Mithril stack:</p><ul><li>HTTP API protocol to ensure compatibility in the communication between nodes (use Semver).</li><li>Crate version: each node &amp; library has its own version (use Semver). The commit digest is automatically added to the version by the CI pipeline.</li><li>Release Version: the distribution version (use version scheme <strong>YYWW.patch</strong> | <strong>YYWW.patch-name</strong>). The VERSION file is computed by the pipeline from the tag release.</li></ul><p>The documentation is tied to a Release Version.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process-1">Release Process<a href="#release-process-1" class="hash-link" aria-label="Direct link to Release Process" title="Direct link to Release Process">​</a></h3><p>Starting just after a new release has been made:</p><ol><li>Develop on a dedicated development branch.</li><li>When merging PR on main: update the <code>Cargo.toml</code> files with version of the updated nodes.</li><li>Once merged, the CI creates an <code>unstable</code> tag &amp; release which is deployed on testing environment.</li><li>Push a tag using the distribution version format on this commit with a <code>-prerelease</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li><li>Push a tag using the distribution version format on this commit without the <code>-prerelease</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>pre-release</code> for testing.</li><li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li><li>Create a commit:<ol><li>to promote the documentation website from future to current.</li><li>to update the SQL schema with alterations from the previous release.</li></ol></li></ol><p><a target="_blank" href="/doc/assets/files/release_process-a9ce55af510cd542b71e68a485251004.jpg"><img loading="lazy" alt="Release Process" src="/doc/assets/images/release_process-a9ce55af510cd542b71e68a485251004.jpg" width="1220" height="819" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hotfix-release">Hotfix Release<a href="#hotfix-release" class="hash-link" aria-label="Direct link to Hotfix Release" title="Direct link to Hotfix Release">​</a></h3><p>​
In case of a blocking issue (following a distribution release) on the release environment that requires an immediate fix:
​</p><ol><li>Create a branch on the last release tag with the following scheme: <strong>hotfix/{last_distribution-version}.{last_patch_number + 1}</strong>.</li><li>Development of the fix is done on this branch.</li><li>After each commit on this branch, the CI creates an <code>unstable</code> tag &amp; release which is not deployed on testing environment (testing must be done on an ad hoc environment manually created).</li><li>Push a tag on the branch last commit using the branch distribution version with a <code>-hotfix</code> suffix.</li><li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li><li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li><li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li><li>Merge the hotfix branch on main branch (and adapt the changes if they are not compatible with the current main branch).</li></ol>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[2. Use simple structured logging
]]></title>
            <link>https://mithril.network/doc/adr/2</link>
            <guid>https://mithril.network/doc/adr/2</guid>
            <pubDate>Sun, 24 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2><p><strong>Draft</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2><ul><li>Logs are a critical tool for operating any software system, enabling <a href="https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability" target="_blank" rel="noopener noreferrer">observability</a> of the system.</li><li>Following <a href="https://12factor.net/logs" target="_blank" rel="noopener noreferrer">12 Factor Apps</a> principles, providing the needed components and tools to be able to configure logging and monitoring should not be the responsibility of the software components</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2><p><em>Therefore</em></p><ul><li>Each component of the system use <a href="https://www.sumologic.com/glossary/structured-logging/" target="_blank" rel="noopener noreferrer">Structured logging</a> using documented and standardised JSON format for its logs</li><li>Logs are always emitted to <code>stdout</code> of the process the component is part of</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2><ul><li>The schema of the logged items should be properly documented in a JSON schema</li><li>It is the responsibility of the node operator to consume the logs and process them</li><li>We use existing libraries to provide needed log infrastructure, like <a href="https://zsiciarz.github.io/24daysofrust/book/vol2/day4.html" target="_blank" rel="noopener noreferrer">slog</a> for Rust</li></ul>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[1. Record Architecture Decisions
]]></title>
            <link>https://mithril.network/doc/adr/1</link>
            <guid>https://mithril.network/doc/adr/1</guid>
            <pubDate>Thu, 21 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2><p>Accepted</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2><p>We are in search for a means to describe our technical architecture.</p><p>We are a small team working in a very lean and agile way (XP), so we naturally
prefer also light-weight documentation methods which also accomodate change
easily.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2><ul><li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in
this
<a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" target="_blank" rel="noopener noreferrer">article</a>.</li><li>We will follow the convention of storing those ADRs as Markdown formatted
documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's
<a href="https://github.com/npryce/adr-tools" target="_blank" rel="noopener noreferrer">adr-tools</a>. This does not imply we will
be using <code>adr-tools</code> itself.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2><p>See Michael Nygard's article, linked above.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
    </channel>
</rss>