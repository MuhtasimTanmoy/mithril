"use strict";(self.webpackChunkmithril_doc=self.webpackChunkmithril_doc||[]).push([[1094],{27320:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"5","metadata":{"permalink":"/doc/adr/5","source":"@site/adr/005-use-rfc3339-for-dates.md","title":"5. Use rfc3339 for date formatting \\n","description":"Status","date":"2023-06-21T00:00:00.000Z","formattedDate":"June 21, 2023","tags":[{"label":"Accepted","permalink":"/doc/adr/tags/accepted"}],"readingTime":1.18,"hasTruncateMarker":false,"authors":[{"name":"Mithril Team"}],"frontMatter":{"slug":"5","title":"5. Use rfc3339 for date formatting \\n","authors":[{"name":"Mithril Team"}],"tags":["Accepted"],"date":"2023-06-21T00:00:00.000Z"},"nextItem":{"title":"4. Mithril Network Upgrade Strategy\\n","permalink":"/doc/adr/4"}},"content":"## Status\\n\\nAccepted\\n\\n## Context\\n\\nPreviously, on the Mithril project we did not have a preferred format for the dates in our applications, leading to\\nmultiple formats being used.\\n\\nFor example when querying a certificate from an aggregator, the `initiated_at` field did not specify the timezone,\\ntimezone that could be found in the `sealed_at` field:\\n```json\\n{\\n  \\"initiated_at\\": \\"2023-05-26T00:02:23\\",\\n  \\"sealed_at\\": \\"2023-05-26T00:03:23.998753492Z\\"\\n}\\n```\\nSame problem in our databases where a date could be stored without timezone and milliseconds (ie: `2023-06-13 16:35:28`)\\nin one table column and with them in another (ie: `2023-06-13T16:35:28.143292875Z`).\\n\\nThe [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) is a widely used, easily readable, mostly numeric (no\\ntranslation is needed to parse the day or the month), format. Also, it always includes the timezone meaning that our\\nclient can convert such date to their local time if needed.\\n\\n## Decision\\n\\n_Therefore_\\n\\n* We commit to use **RFC 3339** compatible date and time whenever we need to store or show a date and time.\\n\\n## Consequences\\n\\n* All dates and time must use a dedicated type in the application, ie: the `DateTime<Utc>` type from\\n[chrono](https://crates.io/crates/chrono) crate.\\n  * This means that dates must **never** be stored in our types using Strings.\\n* Internally, we will always use the **UTC timezone**, to avoid useless conversions between timezones.\\n* Users or scripts querying dates from our applications or from our databases will be able to parse all of them using\\nthe same format."},{"id":"4","metadata":{"permalink":"/doc/adr/4","source":"@site/adr/004-mithril-network-update-strategy.md","title":"4. Mithril Network Upgrade Strategy\\n","description":"Status","date":"2023-01-05T00:00:00.000Z","formattedDate":"January 5, 2023","tags":[{"label":"Draft","permalink":"/doc/adr/tags/draft"}],"readingTime":3.97,"hasTruncateMarker":false,"authors":[{"name":"Mithril Team"}],"frontMatter":{"slug":"4","title":"4. Mithril Network Upgrade Strategy\\n","authors":[{"name":"Mithril Team"}],"tags":["Draft"],"date":"2023-01-05T00:00:00.000Z"},"prevItem":{"title":"5. Use rfc3339 for date formatting \\n","permalink":"/doc/adr/5"},"nextItem":{"title":"3. Release process and versioning\\n","permalink":"/doc/adr/3"}},"content":"## Status\\n\\n**Draft**\\n\\n## Context\\n\\nWhen we will run Mithril on mainnet there will be thousands of signers running. Upgrading the version of the nodes has an impact as different versions of API, messages, signature may lead to loss of a significant part of the signers population over one epoch or more. In any case we must prevent a gap in the certificate chain while upgrading critical parts.\\n\\nWe need to be able to keep enough of signer nodes and the aggregator able to work together in order to produce at least one certificate per epoch.\\n\\nExamples of such changes:\\n\\n * change in the message structure\\n * change in the cryptographic algorithm\\n * change in communication channels\\n\\n## Decision\\n\\nIn order to synchronize all nodes behavior transition, the Release Team will define Eras that start at a given Cardano Epoch and lasts until the next Era begins. When nodes detect an Era change, they switch from old to new behavior hence all transitioning at almost the same time.\\n\\n## Consequences\\n\\n### Release Team\\n\\nThe release team is the team responsible of releasing new versions of Mithril software. The **Release Team** will be responsible to set the Epoch at which **Eras** change using an **Era Activation Marker**. In order to be able to determine when the new Era will begin, the Release Team has to know what is the share of the total Mithril stake that can run the new behavior. Signer node software versions has to be **monitored**.\\n\\n### Version monitoring\\n\\nThe Release Team must be aware of the software version run by the Signer nodes and their associated stake. The version is going to be added to all HTTP headers in inter-node communication. In a first step, the Aggregator nodes will record this information, and provide the mapping of stakes to Signer nodes.\\n\\nThis configuration works in the case where there is a centralized Aggregator Node (as it is today). In the future, there may be several Aggregator nodes working in a decentralized manner. This would mean having a separate monitoring service, and also monitor the aggregators node versions.\\n\\n### Era Activation Marker\\n\\nAn Era Activation Marker is an information shared among all the nodes. For every upgrade, there are two phases:\\n * a first marker is set on the blockchain that just indicates a new Era will start soon and softwares shall be updated.\\n * a second marker is set that specifies the Epoch when they must switch from old to new behavior.\\n\\nEvery Era Activation Marker will be a transaction in the Cardano blockchain. This implies the nodes must be able to read transactions of the blockchain. Era Activation Markers can be of the same type, the first maker does not hold any Epoch information whereas the second does.\\n\\nNode will check the blockchain for Markers at startup and for every new Epoch. When a node detects a Marker, it will warn the user if it does not support the incoming Era that he must upgrade his node. If the node detects it does not support the current Era, it will stop working with an explicit error message. To ease that operation, Era Activation Marker will be made sortable.\\n\\n### Behavior Switch\\n\\nThe nodes must be able to switch from one behavior to another when the Era Epoch is reached. This means the software must embed both behaviors. The switch is developed as a one time operation, there is no rollback mechanism available. Once the Epoch is transitioned and the switch has occurred, a new software release can remove the old behavior from the codebase.\\n\\n```mermaid\\nsequenceDiagram\\n    actor Release Team\\n    actor User\\n    Release Team--xChain: New Era coming soon.\\n    Note over Chain: new Epoch\\n    Old Node->>Chain: What is the latest marker?\\n    Chain->>Old Node: Era change soon\\n    New Node->>Chain: What is the last marker?\\n    Chain->>New Node: Era change soon\\n    Note over New Node: upgrade\\n    Loop every Epoch\\n        Note over Chain: new Epoch\\n        Old Node->>Chain: What is the last marker?\\n        Chain->>Old Node: Era change soon\\n        Old Node->>User: \u26a0\ufe0f new Era incoming, please update node\\n        New Node->>Chain: What is the last marker?\\n        Chain->>New Node: Era change soon\\n    end\\n    Release Team--xChain: New Era start at Epoch XX.\\n    Loop every Epoch\\n        Note over Chain: new Epoch\\n        Old Node->>Chain: What is the last marker?\\n        Chain->>Old Node: Era change at Epoch XX\\n        Old Node->>User: \u26a0\ufe0f new Era incoming, please update node\\n        New Node->>Chain: What is the last marker?\\n        Chain->>New Node: Era change at Epoch XX\\n    end\\n    Note over Chain: Epoch XX\\n    Note over Old Node,New Node: new Era\\n    New Node->>Chain: What is the last marker?\\n    Chain->>New Node: Era change at Epoch XX\\n    Note over New Node: switch behavior\\n    Old Node->>Chain: What is the last marker?\\n    Chain->>Old Node: Era change at Epoch XX\\n    Old Node->>User: \ud83d\udc80 unsupported Era, quit.\\n```"},{"id":"3","metadata":{"permalink":"/doc/adr/3","source":"@site/adr/003-release/index.md","title":"3. Release process and versioning\\n","description":"Status","date":"2022-10-21T00:00:00.000Z","formattedDate":"October 21, 2022","tags":[{"label":"Draft","permalink":"/doc/adr/tags/draft"}],"readingTime":2.995,"hasTruncateMarker":false,"authors":[{"name":"Mithril Team"}],"frontMatter":{"slug":"3","title":"3. Release process and versioning\\n","authors":[{"name":"Mithril Team"}],"tags":["Draft"],"date":"2022-10-21T00:00:00.000Z"},"prevItem":{"title":"4. Mithril Network Upgrade Strategy\\n","permalink":"/doc/adr/4"},"nextItem":{"title":"2. Use simple structured logging\\n","permalink":"/doc/adr/2"}},"content":"## Status\\n\\n**draft**\\n\\n## Context\\n\\nIn order to deliver regularly the software to our users, we should implement a release process based on a predictable versioning scheme. \\n\\n### Versioning\\n\\nA Release Version determines a distribution of determined node versions and underlying libraries.\\n\\n * Our softwares must be able to interact seamlessly with other Mithril software.\\n * Our softwares must be able to be hosted on crates.io.\\n * Our softwares must clearly indicate compatibility with other Mithril components to end users.\\n \\n\\n### Release process\\n\\nA Release is a software package that is built once and then promoted from the testing environment to the production environment. It can be signed.\\n\\n * Keep it simple.\\n * Automated as much as possible: all points not requiring human decision shall be automated.\\n * Minimize the mean time to release.\\n\\n## Decision\\n\\nThere are 3 versioned layers in the Mithril stack:\\n\\n * HTTP API protocol to ensure compatibility in the communication between nodes (use Semver).\\n * Crate version: each node & library has its own version (use Semver). The commit digest is automatically added to the version by the CI pipeline.\\n * Release Version: the distribution version (use version scheme **YYWW.patch** | **YYWW.patch-name**). The VERSION file is computed by the pipeline from the tag release.\\n\\nThe documentation is tied to a Release Version.\\n\\n### Release Process\\n\\nStarting just after a new release has been made:\\n\\n1. Develop on a dedicated development branch.\\n1. When merging PR on main: update the `Cargo.toml` files with version of the updated nodes.\\n1. Once merged, the CI creates an `unstable` tag & release which is deployed on testing environment.\\n1. Push a tag using the distribution version format on this commit with a `-prerelease` suffix.\\n1. The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on `pre-release` for testing.\\n1. Push a tag using the distribution version format on this commit without the `-prerelease` suffix.\\n1. The CI gets the built artifacts associated with this commit and generates a named release which is deployed on `pre-release` for testing.\\n1. In the release GitHub interface, edit the newly generated release, uncheck the `This is a pre-release` checkbox.\\n1. The CI gets the built artifacts associated with this commit and generates a named release which is deployed on `release`.\\n1. Create a commit:\\n   1. to promote the documentation website from future to current.\\n   1. to update the SQL schema with alterations from the previous release.\\n\\n[![Release Process](./img/release_process.jpg)](./img/release_process.jpg)\\n\\n### Hotfix Release\\n\u200b\\nIn case of a blocking issue (following a distribution release) on the release environment that requires an immediate fix:\\n\u200b\\n1. Create a branch on the last release tag with the following scheme: **hotfix/{last_distribution-version}.{last_patch_number + 1}**.\\n1. Development of the fix is done on this branch.\\n1. After each commit on this branch, the CI creates an `unstable` tag & release which is not deployed on testing environment (testing must be done on an ad hoc environment manually created).\\n1. Push a tag on the branch last commit using the branch distribution version with a `-hotfix` suffix.\\n1. The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on `pre-release` for testing.\\n1. In the release GitHub interface, edit the newly generated release, uncheck the `This is a pre-release` checkbox.\\n1. The CI gets the built artifacts associated with this commit and generates a named release which is deployed on `release`.\\n1. Merge the hotfix branch on main branch (and adapt the changes if they are not compatible with the current main branch)."},{"id":"2","metadata":{"permalink":"/doc/adr/2","source":"@site/adr/002-use-structured-logging.md","title":"2. Use simple structured logging\\n","description":"Status","date":"2022-04-24T00:00:00.000Z","formattedDate":"April 24, 2022","tags":[{"label":"Draft","permalink":"/doc/adr/tags/draft"}],"readingTime":0.665,"hasTruncateMarker":false,"authors":[{"name":"Mithril Team"}],"frontMatter":{"slug":"2","title":"2. Use simple structured logging\\n","authors":[{"name":"Mithril Team"}],"tags":["Draft"],"date":"2022-04-24T00:00:00.000Z"},"prevItem":{"title":"3. Release process and versioning\\n","permalink":"/doc/adr/3"},"nextItem":{"title":"1. Record Architecture Decisions\\n","permalink":"/doc/adr/1"}},"content":"## Status\\n\\n**Draft**\\n\\n## Context\\n\\n* Logs are a critical tool for operating any software system, enabling [observability](https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability) of the system.\\n* Following [12 Factor Apps](https://12factor.net/logs) principles, providing the needed components and tools to be able to configure logging and monitoring should not be the responsibility of the software components\\n\\n## Decision\\n\\n_Therefore_\\n\\n* Each component of the system use [Structured logging](https://www.sumologic.com/glossary/structured-logging/) using documented and standardised JSON format for its logs\\n* Logs are always emitted to `stdout` of the process the component is part of\\n\\n## Consequences\\n\\n* The schema of the logged items should be properly documented in a JSON schema\\n* It is the responsibility of the node operator to consume the logs and process them\\n* We use existing libraries to provide needed log infrastructure, like [slog](https://zsiciarz.github.io/24daysofrust/book/vol2/day4.html) for Rust"},{"id":"1","metadata":{"permalink":"/doc/adr/1","source":"@site/adr/001-use-adr.md","title":"1. Record Architecture Decisions\\n","description":"Status","date":"2022-04-21T00:00:00.000Z","formattedDate":"April 21, 2022","tags":[{"label":"Accepted","permalink":"/doc/adr/tags/accepted"}],"readingTime":0.515,"hasTruncateMarker":false,"authors":[{"name":"Mithril Team"}],"frontMatter":{"slug":"1","title":"1. Record Architecture Decisions\\n","authors":[{"name":"Mithril Team"}],"tags":["Accepted"],"date":"2022-04-21T00:00:00.000Z"},"prevItem":{"title":"2. Use simple structured logging\\n","permalink":"/doc/adr/2"}},"content":"## Status\\n\\nAccepted\\n\\n## Context\\n\\nWe are in search for a means to describe our technical architecture.\\n\\nWe are a small team working in a very lean and agile way (XP), so we naturally\\nprefer also light-weight documentation methods which also accomodate change\\neasily.\\n\\n## Decision\\n\\n* We will use _Architecture Decision Records_, as described by Michael Nygard in\\n  this\\n  [article](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions).\\n* We will follow the convention of storing those ADRs as Markdown formatted\\n  documents stored under `docs/adr` directory, as exemplified in Nat Pryce\'s\\n  [adr-tools](https://github.com/npryce/adr-tools). This does not imply we will\\n  be using `adr-tools` itself.\\n\\n## Consequences\\n\\nSee Michael Nygard\'s article, linked above."}]}')}}]);