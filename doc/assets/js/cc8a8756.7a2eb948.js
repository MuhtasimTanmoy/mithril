"use strict";(self.webpackChunkmithril_doc=self.webpackChunkmithril_doc||[]).push([[2685],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),h=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=h(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=h(n),d=i,p=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(p,o(o({ref:t},c),{},{components:n})):r.createElement(p,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var h=2;h<a;h++)o[h]=n[h];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6837:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return h},toc:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"Overview",sidebar_position:1},s="Mithril Test Lab",h={unversionedId:"mithril/test-lab/test-lab-overview",id:"mithril/test-lab/test-lab-overview",title:"Overview",description:"The following picture describes in high-level box-and-wire diagram how a Mithril Test Lab would instrument Mithril nodes",source:"@site/root/mithril/test-lab/test-lab-overview.md",sourceDirName:"mithril/test-lab",slug:"/mithril/test-lab/test-lab-overview",permalink:"/doc/mithril/test-lab/test-lab-overview",editUrl:"https://github.com/input-output-hk/mithril/tree/main/docs/root/root/mithril/test-lab/test-lab-overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Overview",sidebar_position:1},sidebar:"mithrilSideBar",previous:{title:"Test Lab",permalink:"/doc/category/test-lab"},next:{title:"Design",permalink:"/doc/mithril/test-lab/test-lab-design"}},c={},u=[{value:"Why?",id:"why",level:2},{value:"What?",id:"what",level:2},{value:"How?",id:"how",level:2},{value:"2022-03-07 - Defining a 1st increment",id:"2022-03-07---defining-a-1st-increment",level:3},{value:"Where are we?",id:"where-are-we",level:4},{value:"What a first increment should be?",id:"what-a-first-increment-should-be",level:4},{value:"References",id:"references",level:2}],m={toc:u};function d(e){var t=e.components,l=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mithril-test-lab"},"Mithril Test Lab"),(0,a.kt)("p",null,"The following picture describes in high-level box-and-wire diagram how a Mithril Test Lab would instrument Mithril nodes\nto run complex adversarial tests."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(1953).Z,width:"4735",height:"3378"})),(0,a.kt)("h2",{id:"why"},"Why?"),(0,a.kt)("p",null,"Mithril is both:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A somewhat complex protocol to produce Stake based Threshold Multi-signatures. It depends on relatively sophisticated\ncryptographic algorithms, and mathematical proofs defining security properties and requirements,"),(0,a.kt)("li",{parentName:"ol"},"A set of nodes which run the protocol over a dedicated p2p network, producing signatures, certificates and delivering\nrelevant data to clients.")),(0,a.kt)("p",null,'As the goal of building Mithril network is to provide trusted data to clients without requiring them to run the full\nchain themselves, it is necessary to ensure the basic properties of the "abstract" protocol are indeed provided by the "\nconcrete" implementation. We plan to reach this goal by developing a ',(0,a.kt)("em",{parentName:"p"},"Model-based testing framework"),' for Mithril that\nshould be able to check implementation of actual nodes against expected behaviour, under various scenarios and load\nfrom "happy path" to "adversarial conditions".'),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Mithril Test Lab")," should be as agnostic as possible about the actual implementation of the nodes."),(0,a.kt)("h2",{id:"what"},"What?"),(0,a.kt)("p",null,"The Mithril Test Lab is expected to provide the tooling to build, run, and check the result of those tests. It should be\nable to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Deploy and run a set of Mithril (and Cardano) nodes from some binary packages,"),(0,a.kt)("li",{parentName:"ul"},"Control the network through which Mithril nodes are interacting in order to observe the flow of messages related to\nthe Mithril protocol, and intercept them in order to inject delays, reorderings, faults and arbtitrary messages,"),(0,a.kt)("li",{parentName:"ul"},"Drive the system from the outside, injecting transactions into the instrumented Cardano network and behaving as\nclients, interacting with Mithril nodes through their exposed public API,"),(0,a.kt)("li",{parentName:"ul"},'Impersonate one or more "normal" Mithril nodes and run',(0,a.kt)("em",{parentName:"li"},"Adversarial"),' nodes, trying to "game" the system under various\nconditions of stakes and degrees of control.')),(0,a.kt)("h2",{id:"how"},"How?"),(0,a.kt)("h3",{id:"2022-03-07---defining-a-1st-increment"},"2022-03-07 - Defining a 1st increment"),(0,a.kt)("h4",{id:"where-are-we"},"Where are we?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sketched ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/mithril/tree/main/mithril-test-lab/mithril-monitor"},"monitor")," as the way\nto specify expected behaviour of Mithril network and nodes in Haskell",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Monitor"),"s are ",(0,a.kt)("em",{parentName:"li"},"composable observers")," that can ",(0,a.kt)("em",{parentName:"li"},"monitor")," the trace of observable behaviour of interconnected\nMithril nodes to verify some protocol invariants"),(0,a.kt)("li",{parentName:"ul"},"Users can define basic assertions, properties, invariants, using the language provided by monitors"),(0,a.kt)("li",{parentName:"ul"},"They should also be used to ",(0,a.kt)("em",{parentName:"li"},"drive")," the network, eg. decide when to request signature, when to retrieve\ncertificate and verify them..."),(0,a.kt)("li",{parentName:"ul"},"In essence, ",(0,a.kt)("inlineCode",{parentName:"li"},"Monitor"),"s are an eDSL somewhat akin\nto ",(0,a.kt)("a",{parentName:"li",href:"https://serokell.io/blog/introduction-to-free-monads"},"Free monads")," to represent interesting tests about a\nMithril network, or more precisely to represent ",(0,a.kt)("em",{parentName:"li"},"executable specifications")),(0,a.kt)("li",{parentName:"ul"},"Monitors are interesting if thye provide more abstracting power than mere test examples, eg. express composable\nbehaviour, up to interleaving, provided generative power to be able to abstract from details..."))),(0,a.kt)("li",{parentName:"ul"},"Sketched ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/mithril/tree/main/mithril-proto/test-node"},"Rust mithril node")," which is\nexpected to evolve into some kind of ",(0,a.kt)("em",{parentName:"li"},"reference implementation")," of the Mithril protocol",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'As the underlying library is written in Rust, a Rust node should be "easy" to implement and provides more\nassurance we are actually uysing the protocol right'),(0,a.kt)("li",{parentName:"ul"},"This \"node\"'s usefulness hinges on the fact it really can be instrumented by the monitors' or an over-arching\ndriver/orchestrator: It does not have to implement all the complexity of networking and orchestration a real node\nentails, it only serves as an ",(0,a.kt)("em",{parentName:"li"},"oracle")," against which to check the actual node's implementation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"but")," it's also useful as a way to test the ",(0,a.kt)("inlineCode",{parentName:"li"},"Monitor")," mechanics, and as a surrogate for the real node while we are\ndeveloping the actual node ",(0,a.kt)("em",{parentName:"li"},"and")," the test lab itself"),(0,a.kt)("li",{parentName:"ul"},"Hence the need to have a thin REST layer that exposes an API similar to waht the node provides, which is also a\ngood way to test-drive the real node itself, e.g making it clear what the API should look like in order for the\nnode to be testable"),(0,a.kt)("li",{parentName:"ul"},"However, in this latter role the rust node does not need to implement the protocol in full details, it can just\nprovide canned answers which are ",(0,a.kt)("em",{parentName:"li"},"just enough")," to be useful from the monitors' perspective")))),(0,a.kt)("h4",{id:"what-a-first-increment-should-be"},"What a first increment should be?"),(0,a.kt)("p",null,"A first concrete deliverable milestone for this project could be made of the following."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A Design document:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"There is a general lack of written documentation about the ideas, rationale, design decisions behind all the\nabove, and this is different from implementation-level documentation which ",(0,a.kt)("em",{parentName:"li"},"should also")," be there but can be grown\npiecemeal"),(0,a.kt)("li",{parentName:"ul"},"This document should clarify questions and issues we have been discussing about this project and the chosen\napproach"),(0,a.kt)("li",{parentName:"ul"},"It should also clarify some plan to move forward past a first increment"))),(0,a.kt)("li",{parentName:"ul"},"A basic end-to-end scenario:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'Demonstrates stitching together a network of (dummy, incomplete, lame,...) nodes,in our case the rust node and the\nmonitors in such a way that the latter "drives" the former and observes their behaviour'),(0,a.kt)("li",{parentName:"ul"},"The property/invariant we express does not need to be sophisticated at first, could just be something like:",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Given a network of n correct nodes and some protocol parameters\nWhen monitor issues a signing request for the same item to each of the node\nThen it observes valid signatures emitted by each of the node\nAnd each node can provide a valid certificate")))))),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jepsen.io/"},"Jepsen")," is an implementation of such a MBT framework for verifying ",(0,a.kt)("em",{parentName:"li"},"linearizability")," of consensus\nprotocols"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/stevana/quickcheck-state-machine"},"quickcheck-state-machine")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://quickstrom.io"},"QuickStrom")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://plutus.readthedocs.io/en/latest/"},"Plutus testing framework"))))}d.isMDXComponent=!0},1953:function(e,t,n){t.Z=n.p+"assets/images/mithril-test-lab-aa15f8a9c40c28d7b3fbaa3e48844ac2.jpg"}}]);