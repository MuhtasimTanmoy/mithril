var searchIndex = JSON.parse('{\
"mithril":{"doc":"Implementation of Stake-based Threshold Multisignatures","t":[4,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,3,3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AggregationError","KeyInvalid","KeyRegistered","NotEnoughSignatures","RegisterError","SerializationError","UnregisteredInitializer","UsizeConversionInvalid","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","from","from","into","into","key_reg","ne","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","stm","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","0","1","0","0","ClosedKeyReg","KeyReg","RegParty","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","close","default","eq","eq","fmt","fmt","from","from","init","into","into","merkle_tree","ne","ne","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","reg_parties","register","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","total_stake","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Index","Stake","StmAggrSig","StmAggrVerificationKey","StmClerk","StmInitializer","StmParameters","StmSig","StmSigner","StmVerificationKey","StmVerificationKeyPoP","aggregate","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_avk","compute_avk","dedup_sigs_for_indices","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_registration","from_signer","get_closed_reg","hash","indexes","into","into","into","into","into","into","into","k","m","ne","new_signer","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","params","path","phi_f","pk","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","setup","sigma","sign","stake","stake","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","verification_key","verify","verify","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":["mithril","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::AggregationError","","mithril::RegisterError","","mithril::key_reg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::stmd":["Error types for aggregation.","The supplied key is not valid","This key has already been registered by a participant","Not enough signatures were collected, got this many …","Errors which can be outputted by key registration.","Serialization error","UnregisteredInitializer error","This error happens when we try to convert a u64 to a usize …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Key registration functionality.","","","","","","","","","","Top-level API for Mithril Stake-based Threshold …","","","","","","","","","","","","","","","","","","","","","","","Structure generated out of a closed registration …","Struct that collects public keys and stakes of parties. …","Stores a registered party with its public key and the …","","","","","","","","","","","","","","","","","Finalize the key registration. This function disables …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialise an empty <code>KeyReg</code>. todo: remove this init function","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unique public key out of the key registration instance.","","","","","","","Ordered list of registered parties.","Verify and register a public key and stake for a …","","","","","","","Total stake of the registered parties.","","","","","","","","","","","","","","","Quorum index for signatures. An aggregate signature (…","The quantity of stake held by a party, represented as a <code>u64</code>…","<code>StmMultiSig</code> uses the “concatenation” proving system …","Stm aggregate key, which contains the merkle tree root and …","<code>StmClerk</code> can verify and aggregate <code>StmSig</code>s and verify …","Initializer for <code>StmSigner</code>. This is the data that is used …","Used to set protocol parameters.","Signature created by a single party who has won the …","Participant in the protocol can sign messages. This …","Wrapper of the MultiSignature Verification key","Wrapper of the MultiSignature Verification key with proof …","Aggregate a set of signatures for their corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the <code>StmAggrVerificationKey</code> related to the used …","Compute the <code>StmAggrVerificationKey</code> related to the used …","Given a slice of <code>sigs</code>, this function returns a new list of …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Extract the <code>StmParameters</code> from a byte slice.","Convert a slice of bytes to an <code>StmInitializer</code>","Extract an <code>StmSig</code> from a byte slice.","Extract a <code>StmMultiSig</code> from a byte slice.","Create a new <code>Clerk</code> from a closed registration instance.","Create a Clerk from a signer.","Return the closed registration instance","","The index(es) for which the signature is valid","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Quorum parameter.","Security parameter, upper bound on indices.","","Build the <code>avk</code> for the given list of parties.","","","","","","","","","","","","","","","Current protocol instantiation parameters.","The path through the MerkleTree for this party.","<code>f</code> in phi(w) = 1 - (1 - f)^w, where w is the stake of a …","The Stm verification Key.","","","","","","","","","","","","","","","","","","","","Builds an <code>StmInitializer</code> that is ready to register with …","The signature from the underlying MSP scheme.","This function produces a signature following the …","This participant’s stake.","The stake of the party that made this signature.","Convert to bytes","Convert to bytes","Convert an <code>StmSig</code> into bytes","Convert multi signature to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the verification key.","Verify an stm signature by checking that the lottery was …","Verify aggregate signature, by checking that","","","","","","","","","","","","","",""],"i":[0,3,3,2,0,3,3,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,2,2,3,3,2,3,2,3,0,3,2,3,2,3,2,3,2,3,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,27,27,28,29,0,0,0,10,13,10,13,10,13,10,13,10,13,10,13,10,13,10,13,10,10,10,13,10,13,10,13,10,10,13,13,10,13,10,13,10,13,13,10,10,13,10,13,10,13,13,10,13,10,13,10,13,10,13,10,13,10,13,10,13,0,0,0,0,0,0,0,0,0,0,0,17,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,21,17,17,19,20,22,23,18,19,22,19,20,21,17,22,23,18,19,20,21,17,22,23,23,18,19,20,22,18,17,17,21,22,22,19,20,21,17,22,23,18,19,19,19,20,19,20,21,17,22,23,18,19,20,21,17,22,23,18,20,22,19,22,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,22,23,18,20,22,21,20,22,19,20,22,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18,20,22,18,19,20,21,17,22,23,18,19,20,21,17,22,23,18],"fp":[[4,"Option"],[4,"AggregationError"],[4,"RegisterError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"KeyReg"],[8,"Clone"],[8,"Digest"],[3,"ClosedKeyReg"],[8,"PartialEq"],[8,"Debug"],[6,"Stake"],[3,"StmClerk"],[3,"StmAggrSig"],[3,"StmParameters"],[3,"StmInitializer"],[3,"StmSigner"],[3,"StmSig"],[3,"StmAggrVerificationKey"],[3,"Vec"],[15,"u8"],[6,"StmVerificationKeyPoP"],[13,"NotEnoughSignatures"],[13,"KeyRegistered"],[13,"KeyInvalid"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
