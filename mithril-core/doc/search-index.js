var searchIndex = JSON.parse('{\
"mithril":{"doc":"Implementation of Mithril Threshold Stake-Based Signatures …","tn":["error","key_reg","merkle_tree","stm","AggregationFailure","EvalInvalid","IndexBoundFailed","IndexNotUnique","InvalidKey","InvalidKey","InvalidMerkleTree","InvalidPath","InvalidSignature","InvalidSignature","InvalidSignature","IvkInvalid","KeyRegistered","LotteryLost","MerkleTreeError","MithrilWitnessError","MultiSignatureError","NoQuorum","NotEnoughSignatures","PartyRegistered","PathInvalid","RegisterError","SerializationError","SerializationError","SerializationError","StakeInvalid","SumInvalid","UnexpectedBlstTypes","UnknownPartyId","VerificationFailure","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","ne","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","0","1","0","0","0","0","0","0","1","0","0","0","0","0","0","0","ClosedKeyReg","KeyReg","RegParty","avk","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","close","default","eq","eq","fmt","fmt","from","from","init","into","into","ne","ne","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","reg_parties","register","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","total_stake","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","0","1","MTLeaf","MerkleTree","MerkleTreeCommitment","Path","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","check","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","concat_with_msg","create","default","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","from_bytes","get_path","into","into","into","into","ne","ne","ne","nr_leaves","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","root","root","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","to_bytes","to_bytes","to_commitment","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Index","PartyId","Stake","StmClerk","StmInitializer","StmMultiSig","StmParameters","StmSig","StmSigner","StmVerificationKey","StmVerifier","aggregate","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eligibility_check","eq","ev_lt_phi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_registration","from_signer","generate_new_key","index","into","into","into","into","into","into","into","k","m","ne","new","new_epoch","new_signer","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","params","party","party_id","path","phi_f","pk","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_key","set_params","set_stake","setup","sigma","sign","stake","stake","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","verification_key","verify","verify_msig","verify_msig","verify_sig","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":["mithril","","","","mithril::errormithril::error::AggregationFailure","","mithril::error::MithrilWitnessError","","","","","","","mithril::error::MultiSignatureError","mithril::error::RegisterError","","","","mithril::error::VerificationFailure","","mithril::key_reg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::stmd":["Crate specific errors","Key registration functionality.","Creation and verification of Merkle Trees","Top-level API for Mithril Stake-based Threshold …","Error types for aggregation.","MSP.Eval was computed incorrectly","There is an index out of bounds","There is a duplicate index","Incorrect proof of possession","The supplied key is not valid","The Merkle Tree is invalid","Invalid merkle path","Invalid Multi signature","A party submitted an invalid signature","The MSP signature is invalid","The IVK is invalid after aggregating the keys","This key has already been registered by a participant","The lottery was actually lost for the signature","Error types related to merkle trees","Errors which can be output by Mithril verification.","Error types for multi signatures","No quorum was found","Not enough signatures were collected, got this many …","This participant has already been registered","The path is not valid for the Merkle Tree","Errors which can be outputted by key registration.","This error occurs when the the serialization of the raw …","Serialization error","Serialization error","A party did not actually win the lottery","Mu is not the sum of the signatures","This error occurs when the underlying function is passed …","The supplied participant id does not belong to the …","Error types for single signature verification","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure generated out of a closed registration. One can …","Struct that collects public keys and stakes of parties. …","A registered party, a stake associated with its public key","Unique public key out of the key registration instance.","","","","","","","","","","","","","","","","","End registration. Disables <code>KeyReg::register</code>. Consumes the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialise a KeyReg with all eligible parties and stakes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Ordered list of registered parties","Register the pubkey for a particular party.","","","","","","","Total stake of the registered parties.","","","","","","","","","","","","","","","","","The values that are represented in the Merkle Tree.","Tree of hashes, providing a commitment of data and its …","MerkleTree commitment. This structure differs from …","Path of hashes from root to leaf in a Merkle Tree. …","","","","","","","","","","","","","","","","","Check an inclusion proof that <code>val</code> is part of the tree by …","","","","","","","","","","","","","","","","","","Serializes the Merkle Tree commitment together with a …","Provided a non-empty list of leaves, <code>create</code> generates its …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a byte slice into a Path","Try to convert a byte string into a <code>MerkleTree</code>.","Get a path (hashes of siblings of the path to the root …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Number of leaves committed in the commitment","","","","","","","","","","Get the root of the tree","Root of the merkle commitment","","","","","","","","","","","","","Convert to bytes","Convert a <code>MerkleTree</code> into a byte string, containing $4 + n …","Convert merkle tree to a commitment. This function simply …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Quorum index for signatures. An aggregate signature (…","Party identifier, unique for each participant in the …","The quantity of stake held by a party, represented as a <code>u64</code>…","<code>StmClerk</code> can verify and aggregate <code>StmSig</code>s and verify …","Initializer for <code>StmSigner</code>. This is the data that is used …","<code>StmMultiSig</code> uses the “concatenation” proving system. …","Used to set protocol parameters.","Signature created by a single party who has won the …","Participant in the protocol. Can sign messages. This …","Wrapper of the MultiSignature Verification key","<code>StmVerifier</code> can verify <code>StmSig</code>s. <code>StmVerifiers</code> require les …","Aggregate a set of signatures for their corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to win the lottery for this message/index combo.","","The crate <code>rug</code> has sufficient optimizations to not require …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert <code>StmParameters</code> from a byte slice","Convert a slice of bytes to an <code>StmInitializer</code>","Convert a byte string into an <code>StmSigner</code>","Convert an <code>StmSig</code> from a byte slice","Convert a <code>StmMultiSig</code> from a byte slice","Create a new <code>Clerk</code> from a closed registration instance. …","Creates a Clerk from a Signer.","Create a new key.","The index for which the signature is valid","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Quorum parameter","Security parameter, upper bound on indices","","Generate a new StmVerifier. When creating a verifier from …","This function should be called when a signing epoch is …","Build the avk for the given list of parties.","","","","","","","","","","","","","","","Get the parameters","The party that made this signature.","Get the party ID.","The path through the MerkleTree for this party.","<code>f</code> in phi(w) = 1 - (1 - f)^w, where w is the stake of a …","The pubkey from the underlying MSP scheme.","","","","","","","","","","","","","","","","","","","","","","Set a new pair of keys out of a secret key","Set the StmParameters.","Set the stake.","Builds an <code>StmInitializer</code> that is ready to register with …","The signature from the underlying MSP scheme.","If lottery is won for this message/index, signs it.","Get the stake.","The stake of the party that made this signature.","Convert to bytes","Convert to bytes","Return a byte string","Convert an <code>StmSig</code> into bytes","Convert multi signature to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the verification key.","Verify aggregate signature","Verify an aggregation of signatures.","Verify an aggregated signature","Verify an stm signature by checking that the lottery was …","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,2,3,4,5,2,1,4,1,3,4,0,0,0,1,6,3,1,0,2,5,3,1,1,2,3,0,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,1,6,4,5,3,1,6,4,5,3,2,2,2,1,1,6,6,4,4,5,5,3,3,2,2,2,1,6,4,5,3,3,2,1,1,6,4,5,3,2,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,2,1,6,4,5,3,7,7,8,9,10,11,12,13,10,14,15,16,17,18,19,20,0,0,0,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,22,22,21,22,21,22,21,22,22,21,22,21,22,21,22,21,21,22,22,21,22,21,22,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,23,23,0,0,0,0,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,25,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,25,26,23,23,24,25,26,23,24,26,23,24,25,26,23,24,25,26,24,26,26,23,24,25,26,23,24,26,25,23,24,25,26,23,24,25,26,23,26,25,23,24,25,26,23,24,25,26,23,24,25,26,24,26,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,0,0,0,0,0,0,0,0,0,0,0,27,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,30,28,0,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,31,32,27,27,29,31,28,29,30,27,31,32,33,28,28,28,33,30,29,28,29,30,27,31,32,33,28,29,30,27,31,32,33,29,31,29,31,28,31,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,29,29,29,29,31,30,29,31,28,29,30,31,32,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,28,29,30,27,31,32,33,29,32,27,33,27,28,29,30,27,31,32,33,28,29,30,27,31,32,33],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["mithrilwitnesserror",4]],[[["",0]],["aggregationfailure",4]],[[["",0]],["verificationfailure",4]],[[["",0]],["merkletreeerror",4]],[[["",0]],["registererror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["multisignatureerror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["registererror",4]]],[[["merkletreeerror",4]]],[[]],[[]],[[]],[[]],[[]],[[["multisignatureerror",4]]],[[]],[[]],[[],["i64",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["multisignatureerror",4]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["keyreg",3]],[[["",0]],["closedkeyreg",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["closedkeyreg",3]],[[]],[[["",0],["keyreg",3]],["bool",0]],[[["",0],["closedkeyreg",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0],["keyreg",3]],["bool",0]],[[["",0],["closedkeyreg",3]],["bool",0]],[[]],[[]],[[]],[[]],null,[[["",0],["partyid",6],["verificationkeypop",3]],["result",4,[["registererror",4]]]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["mtleaf",3],["path",3]],["result",4,[["merkletreeerror",4]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["mtleaf",3]],[[["",0]],["path",3]],[[["",0]],["merkletreecommitment",3]],[[["",0]],["merkletree",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[["",0]],["vec",3,[["u8",0]]]],[[],["merkletree",3]],[[],["mtleaf",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["mtleaf",3]],["bool",0]],[[["",0],["path",3]],["bool",0]],[[["",0],["merkletree",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4,[["path",3],["merkletreeerror",4]]]],[[],["result",4,[["merkletreeerror",4]]]],[[["",0],["usize",0]],["path",3]],[[]],[[]],[[]],[[]],[[["",0],["mtleaf",3]],["bool",0]],[[["",0],["path",3]],["bool",0]],[[["",0],["merkletree",3]],["bool",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0]],["vec",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["merkletreecommitment",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["stmmultisig",3],["aggregationfailure",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["stmparameters",3]],[[["",0]],["stminitializer",3]],[[["",0]],["stmsigner",3]],[[["",0]],["stmclerk",3]],[[["",0]],["stmsig",3]],[[["",0]],["stmmultisig",3]],[[["",0]],["stmverifier",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["index",6]],["bool",0]],[[["",0],["stmparameters",3]],["bool",0]],[[["f64",0],["stake",6],["stake",6]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["registererror",4]]]],[[],["result",4,[["stminitializer",3],["registererror",4]]]],[[],["result",4,[["multisignatureerror",4]]]],[[],["result",4,[["stmsig",3],["multisignatureerror",4]]]],[[],["result",4,[["stmmultisig",3],["multisignatureerror",4]]]],[[["stmparameters",3],["closedkeyreg",3]]],[[["stmsigner",3]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["stmparameters",3]],["bool",0]],[[["merkletreecommitment",3],["stmparameters",3],["stake",6]]],[[["option",4,[["stake",6]]]],["stminitializer",3]],[[["closedkeyreg",3]],["stmsigner",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["stmparameters",3]],null,[[["",0]],["partyid",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["signingkey",3]]],[[["",0],["stmparameters",3]]],[[["",0],["stake",6]]],[[["stmparameters",3],["partyid",6],["stake",6],["",0]]],null,[[["",0],["index",6]],["option",4,[["stmsig",3]]]],[[["",0]],["stake",6]],null,[[["",0]]],[[["",0]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["stmverificationkey",6]],[[["",0],["merkletreecommitment",3],["stmparameters",3],["stake",6]],["result",4,[["mithrilwitnesserror",4]]]],[[["",0],["stmmultisig",3]],["result",4,[["mithrilwitnesserror",4]]]],[[["",0],["stmmultisig",3]],["result",4,[["mithrilwitnesserror",4]]]],[[["",0],["stmsig",3]],["result",4,[["verificationfailure",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"MithrilWitnessError"],[4,"MultiSignatureError"],[4,"RegisterError"],[4,"VerificationFailure"],[4,"MerkleTreeError"],[4,"AggregationFailure"],[13,"NotEnoughSignatures"],[13,"IvkInvalid"],[13,"SumInvalid"],[13,"IndexBoundFailed"],[13,"PathInvalid"],[13,"EvalInvalid"],[13,"InvalidSignature"],[13,"InvalidKey"],[13,"KeyRegistered"],[13,"PartyRegistered"],[13,"UnknownPartyId"],[13,"InvalidKey"],[13,"InvalidMerkleTree"],[13,"InvalidSignature"],[3,"ClosedKeyReg"],[3,"KeyReg"],[3,"MTLeaf"],[3,"Path"],[3,"MerkleTreeCommitment"],[3,"MerkleTree"],[3,"StmClerk"],[3,"StmParameters"],[3,"StmInitializer"],[3,"StmSigner"],[3,"StmSig"],[3,"StmMultiSig"],[3,"StmVerifier"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};