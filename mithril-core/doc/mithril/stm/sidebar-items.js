initSidebarItems({"fn":[["ev_lt_phi","The crate `rug` has sufficient optimizations to not require a taylor approximation with early stop. The difference between the current implementation and the one using the optimization above is around 10% faster. We perform the computations with 117 significant bits of precision, since this is enough to represent the fraction of a single lovelace. We have that 1e6 lovelace equals 1 ada, and there is 45 billion ada in circulation. Meaning there are 4.5e16 lovelace, so 1e-17 is sufficient to represent fractions of the stake distribution. In order to keep the error in the 1e-17 range, we need to carry out the computations with 34 decimal digits (in order to represent the 4.5e16 ada without any rounding errors, we need double that precision)."]],"struct":[["MTValue","The values that are represented in the Merkle Tree."],["StmClerk","`StmClerk` can verify and aggregate `StmSig`s and verify `StmMultiSig`s. Clerks can only be generated with the registration closed. This avoids that a Merkle Tree is computed before all parties have registered."],["StmInitializer","Initializer for `StmSigner`. This is the data that is used during the key registration procedure. One the latter is finished, this instance is consumed into an `StmSigner`."],["StmMultiSig","`StmMultiSig` uses the “concatenation” proving system. This means that the aggregated signature contains a vector of the individual signatures."],["StmParameters","Used to set protocol parameters."],["StmSig","Signature created by a single party who has won the lottery."],["StmSigner","Participant in the protocol. Can sign messages. This instance can only be generated out of an `StmInitializer` and a closed `KeyReg`. This ensures that a `MerkleTree` root is not computed before all participants have registered."],["StmVerifier","`StmVerifier` can verify `StmSig`s. `StmVerifiers` require les sinformation than `StmClerks` or `StmSigner`s, as they do not require knowledge of the whole Merkle Tree, but only the commitment."]],"type":[["Index","Quorum index for signatures. An aggregate signature (`StmMultiSig`) must have at least `k` unique indices."],["PartyId","Party identifier, unique for each participant in the protocol."],["Stake","The quantity of stake held by a party, represented as a `u64`."]]});