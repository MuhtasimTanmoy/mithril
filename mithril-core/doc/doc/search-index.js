var searchIndex = JSON.parse('{\
"mithril":{"doc":"Implementation of Mithril Threshold Stake-Based Signatures …","t":[0,0,0,0,0,0,11,0,11,3,13,3,13,13,3,4,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,16,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,13,13,13,13,8,3,3,4,13,13,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,6,6,6,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,8,16,16,16,16,16,10,10,0,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,4,6,13,13,13,13,3,4,13,6,13,6,3,3,3,3,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["key_reg","merkle_tree","mithril_proof","models","msp","proof","read","stm","write","ClosedKeyReg","InvalidKey","KeyReg","KeyRegistered","PartyRegistered","RegParty","RegisterError","UnknownPartyId","avk","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","default","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","ne","new","null_party","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","party_id","pk","register","retrieve","retrieve","retrieve_all","retrieve_all","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","stake","to_owned","to_owned","to_owned","to_owned","to_string","total_stake","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","0","0","0","0","F","MTHashLeaf","MerkleTree","MerkleTreeCommitment","Path","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","check","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","concat_avk_with_msg","create","eq","fmt","fmt","fmt","from","from","from","get_path","hash","hash_children","inject","into","into","into","ne","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","read","root","root","root_bytes","root_to_bytes","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_bytes","to_commitment","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","zero","EvalInvalid","IndexBoundFailed","IndexNotUnique","IvkInvalid","MithrilProof","MithrilStatement","MithrilWitness","MithrilWitnessError","NoQuorum","PathInvalid","RELATION","StakeInvalid","SumInvalid","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","concat_proofs","fmt","fmt","fmt","from","from","from","into","into","into","into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","read","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","0","0","0","0","0","1","ConcatEnv","ConcatProof","ConcatRel","digest","DigestHash","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","eq","fmt","from","hash","into","ne","overflowing_as","overflowing_cast_from","read","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","write","0","Msp","MspMvk","MspPk","MspSig","MspSk","aggregate_keys","aggregate_sigs","aggregate_ver","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","check","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp_msp_mvk","eq","eq","eq","eq","eval","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gen","hash","hash","hash","into","into","into","into","into","k1","k2","mvk","ne","ne","ne","ne","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","read","read","read","read","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sig","sub","sum","sum","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","ver","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write","write","write","Env","Error","Proof","ProverEnv","ProvingKey","Relation","Statement","VerificationKey","Witness","prove","setup","trivial","verify","TrivialEnv","TrivialError","TrivialProof","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","prove","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","setup","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","verify","vzip","vzip","vzip","witness","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","0","1","AggregationFailure","Index","InvalidAggregate","InvalidMerkleTree","InvalidSignature","LotteryLost","MTValue","MultiVerificationFailure","NotEnoughSignatures","PartyId","ProofError","Stake","StmClerk","StmInitializer","StmMultiSig","StmParameters","StmSig","StmSigner","VerificationFailure","aggregate","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eligibility_check","eq","ev_lt_phi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_registration","from_signer","generate_new_key","into","into","into","into","into","into","into","into","into","into","k","m","ne","new_epoch","new_signer","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","params","party","party_id","path","phi_f","pk","read","read","read","read","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","secret_key","set_key","set_params","set_stake","setup","sigma","sign","stake","stake","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","verification_key","verify_msig","verify_sig","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write","write","write","write","0","1","0","0","0","0"],"q":["mithril","","","","","","","","","mithril::key_reg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::key_reg::RegisterError","","","","mithril::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::mithril_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::mithril_proof::MithrilWitnessError","","","","","","mithril::mithril_proof::concat_proofs","","","mithril::models","mithril::models::digest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::msp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::proof","","","","","","","","","","","","","mithril::proof::trivial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mithril::stmmithril::stm::AggregationFailure","","mithril::stm::MultiVerificationFailure","","mithril::stm::VerificationFailure",""],"d":["Placeholder key registration functionality.","Creation and verification of Merkle Trees","Prove the validity of aggregated signatures.","Convenient instantiations MTHashLeaf","Base multisignature scheme, used as a primitive for STM. …","General API for producing proofs from statements and …","","Top-level API for Mithril Stake-based Threshold …","","Structure generated out of a closed registration. One can …","The supplied key is not valid","Simple struct that collects pubkeys and stakes of parties. …","This key has already been registered by a participant","This participant has already been registered","A registered party, i.e. an id associated with its stake …","Errors which can be outputted by key registration.","The supplied participant id does not belong to the …","Unique public key out of the key registration instance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","End registration. Disables <code>KeyReg::register</code>. Consumes the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new KeyReg with all parties and stakes known.","Empty party.","","","","","","","","","The id for the registered party.","The pubkey for the registered party.","Register the pubkey for a particular party.","Retrieve the pubkey and stake for a party.","Retrieve the pubkey and stake for a party.","Retrieve the pubkey and stake for all parties.","Retrieve the pubkey and stake for all parties.","","","","","","","","","The stake for the registered party.","","","","","","Total stake of the registered parties.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The output domain of the hasher.","This trait describes a hashing algorithm. For mithril we …","Tree of hashes, providing a commitment of data and its …","MerkleTree commitment. This structure differs from …","Path of hashes from root to leaf in a Merkle Tree. Used to …","","","","","","","","","","","","","Check an inclusion proof that <code>val</code> is the <code>i</code>th leaf stored …","","","","","","","","","","","","","Serializes the Merkle Tree together with a message in a …","converting a single L to bytes, and then calling …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a path (hashes of siblings of the path to the root node","Hash together an arbitrary number of values, Reducing the …","Combine (and hash) two hash values","How to map (or label) values with their hash values","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new hasher","","","","","","","","Get the root of the tree","Get the root of the tree","How to extract hashes as bytes","Convert the root of the tree to bytes.","","","","","","","Convert the root of the tree to bytes.","Build a <code>MerkleTreeCommitment</code>, which simply consists in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This should be some “null” representative","MSP.Eval was computed incorrectly","There is an index out of bounds","There is a duplicate index","The IVK is invalid after aggregating the keys","A MithrilProof just fixes the relation to a constant.","The statement we want to prove, namely that the signature …","A MithrilWitness is an aggregation of signatures","Errors which can be output by Mithril verification.","No quorum was found","The path is not valid for the Merkle Tree","The relation is a constant.","A party did not actually win the lottery","Mu is not the sum of the signatures","","","","","","","","","","","","","","","","","","","","","","","This is the trivial proof system instantiated to Mithril: …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the env to the TrivialEnv.","The proof is a TrivialProof.","The relation is a function outputting an error or not.","Implementations necessary for Digest-based instantiations","A newtype that allows us to implement traits like ToBytes, …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Struct used to namespace the functions.","MSP verification key.","MSP public key, contains the verification key and proof of …","MSP signature.","MSP secret key.","Aggregate verification keys.","Aggregate signatures.","Verify an aggregate signature (identical to <code>Msp::ver</code>).","","","","","","","","","","","","","","","","","","","","","Check that a pubkey is well-formed.","","","","","","","","","","","","","","","","","","","","","Compare two <code>MspMvk</code>. Used for PartialOrd impl, used to …","","","","","Hash the signature to produce a 64 bytes integer. We …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Create a new pubkey/secretkey pair.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The first element of the PoP.","The second element of the PoP.","The verification key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sign a message using a secret key.","","","","Convert the mvk to bytes.","Convert the signature to bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature against a verification key.","","","","","","","","","","","","","","","","","","","","Context for this proof system.","Type of errors which can be output by the proof system. …","Implementors of <code>Proof</code> know how to prove that a relation of …","An environment or context that can contain any long-lived …","The secret key used to create proofs.","Relation between values of type Statement and type Witness.","Statement to be proven.","The public key used to verify proofs.","Witness of the validity of Statement.","Construct a proof.","Create a new key pair.","A trivial implementation of <code>Proof</code> where proofs of …","Verify a proof.","Trivial environment which contains nothing.","Error wrapper for TrivialProof.","TrivialProof simply contains the Witness directly.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new TrivialProof from the witness.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The witness itself.","","","","","","","","","Error types for aggregation.","Quorum index for signatures. An aggregate signature (…","The underlying MSP aggregate is invalid","The Merkle Tree is invalid","The MSP signature is invalid","The lottery was actually lost for the signature","The values that are represented in the Merkle Tree.","Error types for multisignature verification","Not enough signatures were collected, got this many …","Party identifier, unique for each participant in the …","Error wrapper for underlying proof system.","The quantity of stake held by a party, represented as a <code>u64</code>…","<code>StmClerk</code> can verify and aggregate <code>StmSig</code>s and verify …","Initializer for <code>StmSigner</code>. This is the data that is used …","Aggregated signature of many parties. Contains proof that …","Used to set protocol parameters.","Signature created by a single party who has won the …","Participant in the protocol. Can sign messages. This …","Error types for single signature verification","Aggregate a set of signatures for their corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to win the lottery for this message/index combo.","","The crate <code>rug</code> has sufficient optimizations to not require …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>Clerk</code> from a closed registration instance.","Creates a Clerk from a Signer.","Create a new key.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Quorum parameter","Security parameter, upper bound on indices","","This function should be called when a signing epoch is …","Build the avk for the given list of parties.","","","","","","","","","","","","","","","","","","","","","Get the parameters","The party that made this signature.","Get the party ID.","The path through the MerkleTree for this party.","<code>f</code> in phi(w) = 1 - (1 - f)^w, where w is the stake of a …","The pubkey from the underlying MSP scheme.","","","","","","","","","","","","","","","","","","","","","","","","","Extract the secret key.","Set a new pair of keys out of a secret key","Set the StmParameters.","Set the stake.","Builds an <code>StmInitializer</code> that is ready to register with …","The signature from the underlying MSP scheme.","If lottery is won for this message/index, signs it.","Get the stake.","The stake of the party that made this signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the verification key.","Verify an aggregation of signatures.","Verify a signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,0,2,2,0,0,2,3,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,4,5,4,3,5,2,2,4,3,5,2,4,3,5,2,5,4,5,4,3,5,2,4,3,5,2,5,5,4,4,3,4,3,4,3,5,2,4,3,5,2,5,4,3,5,2,2,3,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,4,3,5,2,5,6,7,8,9,10,0,0,0,0,11,12,13,11,12,13,11,12,13,11,12,13,12,11,12,13,11,12,13,11,12,13,11,12,13,0,13,11,11,12,13,11,12,13,13,10,10,10,11,12,13,11,10,11,12,13,11,12,13,11,12,13,10,13,11,12,13,11,12,13,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,10,14,14,14,14,0,0,0,0,14,14,15,14,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,17,14,17,14,0,17,14,14,16,17,14,16,17,14,14,16,17,14,16,17,14,17,16,17,14,16,17,14,17,14,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,17,18,19,20,21,22,20,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,0,0,0,0,0,25,25,25,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,25,26,24,27,28,25,26,24,27,28,26,24,27,28,26,24,27,28,24,28,24,26,24,27,28,25,25,26,24,27,28,25,26,24,27,27,28,25,26,24,27,25,26,24,27,28,27,27,27,26,24,27,28,25,26,24,27,28,25,26,24,27,28,24,28,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,24,24,28,24,28,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,25,25,26,24,27,28,25,26,24,27,28,25,26,24,27,28,26,24,27,28,29,29,0,0,30,29,29,30,29,29,30,0,29,0,0,0,31,32,33,31,32,33,31,32,33,31,32,33,31,32,33,31,32,33,31,32,31,32,31,32,33,33,31,32,33,31,32,33,33,32,31,32,33,31,32,33,32,31,32,33,31,32,33,31,31,32,33,31,32,33,31,32,33,31,32,33,31,32,33,31,32,33,32,31,32,33,32,31,32,33,31,32,33,34,34,0,0,35,36,36,36,0,0,37,0,35,0,0,0,0,0,0,0,0,38,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,41,38,42,43,37,36,35,34,39,41,38,42,43,37,36,35,41,39,0,34,39,40,41,38,42,43,37,37,36,36,35,35,34,39,40,41,38,42,43,37,36,35,38,38,40,34,39,40,41,38,42,43,37,36,35,39,39,39,41,40,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,40,42,40,42,39,42,39,40,42,43,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,40,40,40,40,40,42,41,40,42,34,39,41,38,42,43,37,36,35,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,40,38,38,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,41,38,42,43,37,36,35,34,39,40,42,43,44,44,45,46,47,48],"f":[null,null,null,null,null,null,[[["read",8]],["result",6]],null,[[["",0],["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["keyreg",3]],[[["",0]],["closedkeyreg",3]],[[["",0]],["regparty",3]],[[["",0]],["registererror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["closedkeyreg",3]],[[]],[[["",0],["regparty",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["regparty",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["partyid",6],["msppk",3]],["result",4,[["registererror",4]]]],[[["",0],["partyid",6]],["option",4,[["regparty",3]]]],[[["",0],["partyid",6]],["option",4,[["regparty",3]]]],[[["",0]],["vec",3,[["regparty",3]]]],[[["",0]],["vec",3,[["regparty",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["",0],["",0],["usize",0],["path",3]],["bool",0]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["path",3]],[[["",0]],["merkletreecommitment",3]],[[["",0]],["merkletree",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["merkletreecommitment",3]],["vec",3,[["u8",0]]]],[[],["merkletree",3]],[[["",0],["path",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["usize",0]],["path",3]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["path",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["read",8]],["result",6]],[[["",0]]],[[["",0]]],[[],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["merkletreecommitment",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",6]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["mithrilwitness",3]],[[["",0]],["mithrilwitnesserror",4]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["i64",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["read",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["option",4]],[[],["option",4]],[[["",0]],["digesthash",3]],[[["",0],["",0]]],[[["",0],["digesthash",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]]],[[]],[[["",0],["digesthash",3]],["bool",0]],[[]],[[]],[[["read",8]],["result",6]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",6]],null,null,null,null,null,null,[[],["mspmvk",3]],[[],["mspsig",3]],[[["mspmvk",3],["mspsig",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[["msppk",3]],["bool",0]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["mspsk",3]],[[["",0]],["mspmvk",3]],[[["",0]],["msppk",3]],[[["",0]],["mspsig",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[["",0],["",0]],["ordering",4]],[[["",0],["mspmvk",3]],["ordering",4]],[[["",0],["mspsk",3]],["bool",0]],[[["",0],["mspmvk",3]],["bool",0]],[[["",0],["msppk",3]],["bool",0]],[[["",0],["mspsig",3]],["bool",0]],[[["index",6],["mspsig",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["mspsk",3]]],[[]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["mspsk",3]],["bool",0]],[[["",0],["mspmvk",3]],["bool",0]],[[["",0],["msppk",3]],["bool",0]],[[["",0],["mspsig",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["read",8]],["result",4,[["error",3]]]],[[["read",8]],["result",4,[["error",3]]]],[[["read",8]],["result",4,[["error",3]]]],[[["read",8]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mspsk",3]],["mspsig",3]],[[],["mspmvk",3]],[[]],[[]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mspmvk",3],["mspsig",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",4,[["error",3]]]],[[["",0],["write",8]],["result",4,[["error",3]]]],[[["",0],["write",8]],["result",4,[["error",3]]]],[[["",0],["write",8]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[["",0]]],null,[[["",0]],["result",4]],null,null,null,[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["trivialenv",3]],[[["",0]],["trivialproof",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["fmtresult",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["trivialenv",3],["",0]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["trivialenv",3],["",0],["",0]],["result",4]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["stmmultisig",3],["aggregationfailure",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",0]],["mtvalue",3]],[[["",0]],["stmparameters",3]],[[["",0]],["stmsigner",3]],[[["",0]],["stmclerk",3]],[[["",0]],["stmsig",3]],[[["",0]],["stmmultisig",3]],[[["",0]],["aggregationfailure",4]],[[["",0]],["verificationfailure",4]],[[["",0]],["multiverificationfailure",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["index",6]],["bool",0]],[[["",0],["stmparameters",3]],["bool",0]],[[["f64",0],["stake",6],["stake",6]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["stmparameters",3],["closedkeyreg",3]]],[[["stmsigner",3]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["stmparameters",3]],["bool",0]],[[["option",4,[["stake",6]]]],["stminitializer",3]],[[["closedkeyreg",3]],["stmsigner",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["stmparameters",3]],null,[[["",0]],["partyid",6]],null,null,null,[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["mspsk",3]],[[["",0],["mspsk",3]]],[[["",0],["stmparameters",3]]],[[["",0],["stake",6]]],[[["stmparameters",3],["partyid",6],["stake",6],["",0]]],null,[[["",0],["index",6]],["option",4,[["stmsig",3]]]],[[["",0]],["stake",6]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["msppk",3]],[[["",0],["stmmultisig",3]],["result",4,[["multiverificationfailure",4]]]],[[["",0],["stmsig",3],["index",6]],["result",4,[["verificationfailure",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["write",8]],["result",4,[["error",3]]]],[[["",0],["write",8]],["result",6]],[[["",0],["write",8]],["result",6]],[[["",0],["write",8]],["result",4,[["error",3]]]],[[["",0],["write",8]],["result",4,[["error",3]]]],null,null,null,null,null,null],"p":[[6,"ConcatProof"],[4,"RegisterError"],[3,"ClosedKeyReg"],[3,"KeyReg"],[3,"RegParty"],[13,"KeyRegistered"],[13,"PartyRegistered"],[13,"UnknownPartyId"],[13,"InvalidKey"],[8,"MTHashLeaf"],[3,"Path"],[3,"MerkleTreeCommitment"],[3,"MerkleTree"],[4,"MithrilWitnessError"],[8,"MithrilProof"],[3,"MithrilStatement"],[3,"MithrilWitness"],[13,"IvkInvalid"],[13,"SumInvalid"],[13,"IndexBoundFailed"],[13,"PathInvalid"],[13,"EvalInvalid"],[3,"DigestHash"],[3,"MspMvk"],[3,"Msp"],[3,"MspSk"],[3,"MspPk"],[3,"MspSig"],[8,"Proof"],[8,"ProverEnv"],[3,"TrivialEnv"],[3,"TrivialProof"],[3,"TrivialError"],[3,"MTValue"],[4,"MultiVerificationFailure"],[4,"VerificationFailure"],[4,"AggregationFailure"],[3,"StmClerk"],[3,"StmParameters"],[3,"StmInitializer"],[3,"StmSigner"],[3,"StmSig"],[3,"StmMultiSig"],[13,"NotEnoughSignatures"],[13,"InvalidAggregate"],[13,"ProofError"],[13,"InvalidMerkleTree"],[13,"InvalidSignature"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};