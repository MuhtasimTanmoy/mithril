window.SIDEBAR_ITEMS = {"enum":[["ProtocolError","Error type for multi signer service."],["RuntimeError","Error encountered or produced by the Runtime. This enum represents the faith of the errors produced during the state transitions."],["SignerRegistrationError","Error type for signer registerer service."],["SnapshotError","Snapshotter error type."],["SnapshotUploaderType","Uploader needed to copy the snapshot once computed."]],"fn":[["check_database_migration","Database version checker. This is the place where migrations are to be registered."]],"mod":[["database","database module. This module contains the entities definition tied with database representation with their associated providers."],["event_store","Event Store module This module proposes tools to send messages between processes and how to persist them in a separate database."],["stake_distribution_service","Stake Pool manager for the Runners"]],"struct":[["AggregatorConfig","Configuration structure dedicated to the AggregatorRuntime."],["AggregatorRunner","The runner responsibility is to expose a code API for the state machine. It holds services and configuration."],["AggregatorRuntime","The AggregatorRuntime responsibility is to create a state machine to handle all actions required by the process of getting multi-signatures. See the documentation for more explanations about the Aggregator state machine."],["CertificatePendingStore","Store for [CertificatePending]."],["CertificateStore","Store for issued certificates."],["Configuration","Aggregator configuration"],["DefaultConfiguration","Default configuration with all the default values for configurations."],["DependencyManager","DependencyManager handles the dependencies"],["DumbSnapshotUploader","Dummy uploader for test purposes."],["DumbSnapshotter","Snapshotter that does nothing. It is mainly used for test purposes."],["FromRegisterSignerAdapter","Adapter to convert [RegisterSignerMessage] to [Signer] instances."],["GenesisConfiguration","Configuration expected for Genesis commands."],["GzipSnapshotter","Gzip Snapshotter create a compressed file."],["LocalSnapshotStore","Store for local snapshots."],["LocalSnapshotUploader","LocalSnapshotUploader is a snapshot uploader working using local files"],["MainOpts","Mithril Aggregator Node"],["MithrilCertificateCreator","Implementation of a [CertificateCreator]"],["MithrilSignerRegisterer","Implementation of a [SignerRegisterer]"],["MultiSignerImpl","MultiSignerImpl is an implementation of the MultiSigner"],["ProtocolParametersStore","`ProtocolParameter` store."],["RemoteSnapshotUploader","GCPSnapshotUploader is a snapshot uploader working using Google Cloud Platform services"],["SignerRegistrationRound","Represents the information needed to handle a signer registration round"],["SingleSignatureStore","Store for [SingleSignatures]."],["ToCertificatePendingMessageAdapter","Adapter to turn [CertificatePending] instances into [CertificatePendingMessage]."],["ToEpochSettingsMessageAdapter","Adapter to spawn [EpochSettingsMessage] from [EpochSettings] instances."],["VerificationKeyStore","Store for the `VerificationKey`."]],"trait":[["AggregatorRunnerTrait","This trait is intended to allow mocking the AggregatorRunner in tests. It exposes all the methods needed by the state machine."],["CertificateCreator","Define a way to create a [Certificate][mithril_common::entities::Certificate]"],["MultiSigner","MultiSigner is the cryptographic engine in charge of producing multi signatures from individual signatures"],["ProtocolParametersStorer","Trait for mocking `ProtocolParameterStore`."],["SignerRegisterer","Trait to register a signer"],["SignerRegistrationRoundOpener","Trait to open a signer registration round"],["SnapshotStore","SnapshotStore represents a snapshot store interactor"],["SnapshotUploader","SnapshotUploader represents a snapshot uploader interactor"],["Snapshotter","Define the ability to create snapshots."],["VerificationKeyStorer","Mocking trait for `VerificationKeyStore`."]]};